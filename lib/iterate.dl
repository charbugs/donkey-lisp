
; fn: iterable[i] -> boolean
; iterable: list or string
; return: list or string
(define filter (-> fn iterable
    (_filter fn iterable 
        (if (str? iterable) "" (list)))))
(define _filter (-> fn src dst
    (locals 
        first (head src)
        rest (tail src))
    (if (empty? src)
        dst
       (if (fn first)
            (cons first (_filter fn rest dst))
            (_filter fn rest dst)))))

; fn: iterable[i] -> any
; iterable: list or string
; return: list or string
(define map (-> fn iterable
    (_map fn iterable
        (if (str? iterable) "" (list)))))
(define _map (-> fn src dst
    (if (empty? src)
        dst
        (cons
            (fn (head src))
            (_map fn (tail src) dst)))))

; fn: acc, iterable[i] -> any
; iterable: list or string
; acc: any - start value
; return: any
(define reduce (-> fn iterable acc
    (if (empty? iterable)
        acc
        (fn
            (reduce fn (init iterable) acc)
            (last iterable)))))