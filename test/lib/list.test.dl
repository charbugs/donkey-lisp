(print "----------------------------------------\n")
(print "test list.dl\n")
(print "----------------------------------------\n")

(run-test "(len (list)) returns 0" (->
    (= 0 (len (list)))))

(run-test "(len (list 1)) returns 1" (->
    (= 1 (len (list 1)))))

(run-test "(len (list 1 2)) returns 2" (->
    (= 2 (len (list 1 2)))))

(run-test "(len \"\") returns 0" (->
  (= 0 (len ""))))

(run-test "(len \"b\") returns 1" (->
  (= 1 (len "b"))))

(run-test "(len \"bar\") returns 3" (->
  (= 3 (len "bar"))))

(run-test "(get (list) 0) returns <None>" (->
  (none? (get (list) 0))))

(run-test "(get (list 6 7 8) 0) returns 6" (->
  (= 6 (get (list 6 7 8) 0))))

(run-test "(get (list 6 7 8) 1) returns 7" (->
  (= 7 (get (list 6 7 8) 1))))

(run-test "(get (list 6 7 8) 3) returns <None>" (->
  (none? (get (list 6 7 8) 3))))

(run-test "(get (list 6 7 8) -1) returns <None>" (->
  (none? (get (list 6 7 8) -1))))

(run-test "(get \"bar\" 0) return \"b\"" (->
  (= "b" (get "bar" 0))))

(run-test "(get \"bar\" 2) return \"r\"" (->
  (= "r" (get "bar" 2))))

(run-test "(find (list) 7) return -1" (->
  (= -1 (find (list) 7))))

(run-test "(find (list 3 4 5) 7) return -1" (->
  (= -1 (find (list 3 4 5) 7))))

(run-test "(find (list 3 4 5) 3) return 0" (->
  (= 0 (find (list 3 4 5) 3))))

(run-test "(find (list 3 4 5) 5) return 2" (->
  (= 2 (find (list 3 4 5) 5))))

(run-test "(find (list 3 \"foo\" 5) \"foo\") return 1" (->
  (= 1 (find (list 3 "foo" 5) "foo"))))

(run-test "(find \"foo\" \"b\") returns -1" (->
  (= -1 (find "foo" "b"))))

(run-test "(find \"foo\" \"f\") returns 0" (->
  (= 0 (find "foo" "f"))))

(run-test "(find \"foo\" \"o\") returns 1" (->
  (= 1 (find "foo" "o"))))

(run-test "(range 0 5 (-> x x)) returns (0 1 2 3 4)" (->
    (equal?
        (list 0 1 2 3 4)
        (range 0 5 (-> x x)))))

(run-test "(range 0 5 (-> x 1)) return (1 1 1 1 1)" (->
    (equal?
        (list 1 1 1 1 1)
        (range 0 5 (-> x 1)))))

(run-test "(range 0 5 (-> x (* x x))) return (0 1 4 9 16)" (->
    (equal?
        (list 0 1 4 9 16)
        (range 0 5 (-> x (* x x))))))

(run-test "(range 0 0 (-> x x)) return ()" (->
    (equal?
        (list)
        (range 0 0 (-> x x)))))