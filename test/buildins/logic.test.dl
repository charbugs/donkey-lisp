
(print "----------------------------------------\n")
(print "test build-in logic functions\n")
(print "----------------------------------------\n")

(run-test "(not 3) returns 0" (->
    (= 0 (not 3))))

(run-test "(not -3) returns 0" (->
    (= 0 (not -3))))

(run-test "(not 0) returns 1" (->
    (= 1 (not 0))))

(run-test "(not \"hello\") returns 0" (->
    (= 0 (not "hello"))))

(run-test "(not \"\") returns 1" (->
    (= 1 (not ""))))

(run-test "(not (list 1 2)) returns 0" (->
    (= 0 (not (list 1 2)))))

(run-test "(not (list)) returns 0 (the empty list evaluates to true too)" (->
    (= 0 (not (list)))))

(run-test "(not <None>) returns 1" (->
    (= 1 (not (print))))) ; print without any argument returns None

(run-test "(not <Function>) returns 0 (function always evaluates to true)" (->
    (= 0 (not (-> 23)))))

(run-test "(and 2 3) returns 3" (->
    (= 3 (and 2 3))))

(run-test "(and 2 0) returns 0" (->
    (= 0 (and 2 0))))

(run-test "(and 0 2) returns 0" (->
    (= 0 (and 0 2))))

(run-test "(and 0 0) returns 0" (->
    (= 0 (and 0 0))))

(run-test "(and 1 2 3 0 4) returns 0" (->
    (= 0 (and 1 2 3 0 4))))

(run-test "(and 4 \"hello\") returns \"hello\"" (->
    (= "hello" (and 4 "hello"))))

(run-test "(and 4 \"hello\" \"\") returns \"\"" (->
    (= "" (and 4 "hello" ""))))

(run-test "(and (list) 2) returns 2" (->
    (= 2 (and (list) 2))))

(run-test "(and (list) (list 42)) returns (list 42)" (->
    ; can not compare lists directly via =
    (= 42 (head (and (list) (list 42))))))

(run-test "(and (list) <Function>) returns <Function>" (->
    ; can not compare functions via =
    (= 1 (function? (and (list) (-> 42))))))

(run-test "(or 2 3) returns 2" (->
    (= 2 (or 2 3))))

(run-test "(or 2 0) returns 2" (->
    (= 2 (or 2 0))))

(run-test "(or 0 2) returns 2" (->
    (= 2 (or 0 2))))

(run-test "(or 0 0) return 0" (->
    (= 0 (or 0 0))))

(run-test "(or 0 0 2 3 0) returns 2" (->
    (= 2 (or 0 0 2 3 0))))

(run-test "(or \"hello\" 4) returns \"hello\"" (->
    (= "hello" (or "hello" 4))))

(run-test "(or \"\" \"hello\" 4) returns \"hello\"" (->
    (= "hello" (or "" "hello" 4))))

(run-test "(or (list) 2) returns 2" (->
    (= 1 (list? (or (list) 2)))))

(run-test "(or <Function> 0) returns <Function>" (->
    ; can not compare functions via =
    (= 1 (function? (or (-> 42) 0)))))